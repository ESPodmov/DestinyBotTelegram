import asyncio
import datetime
import logging
import traceback

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from pymongo import MongoClient
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN, MONGOKEY
import keyboards

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

client = MongoClient(MONGOKEY)
db = client.destiny

messages_dict = {
    "start": [
        "<b>–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ</b> - —Å—É—Ç—å –∏ —Å–º—ã—Å–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –¥–µ–ª–æ –∏ –∑–∞–¥–∞—á–∞ –≤—Å–µ–π –∂–∏–∑–Ω–∏.\n–õ—é–¥–∏, –Ω–∞—à–µ–¥—à–∏–µ –µ–≥–æ, "
        "—Å–∏—è—é—Ç, –Ω–∞—Å–ª–∞–∂–¥–∞—é—Ç—Å—è –∂–∏–∑–Ω—å—é, –ø—Ä–∏–Ω–æ—Å—è—Ç –ø–æ–ª—å–∑—É –æ–±—â–µ—Å—Ç–≤—É –∏ –∑–∞—Ä—è–∂–∞—é—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π . –û–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—Å–µ —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ "
        "—Å—Ç–æ—Ä–æ–Ω—ã, –∏ –ø–æ—ç—Ç–æ–º—É –∏–º –Ω–µ—Ç "
        "—Ä–∞–≤–Ω—ã—Ö.\n\n–ö–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Å–≤–æ—ë –ø—Ä–∏–∑–≤–∞–Ω–∏–µ\n–ù–æ –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\n–ö—É–¥–∞ –∏–¥—Ç–∏?\n–ö –∫–æ–º—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?",
        "–ù–∞ –≤—Å–µ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫—É—Ä—Å–µ <b>\"–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\"</b>, "
        "–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å–æ —Å–≤–æ–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é —Å–∏–ª—É"],
    "pre_question": [
        "–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∞–º –∫—É—Ä—Å –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–∫–∞–∫ —É–π—Ç–∏ —Å –Ω–µ–ª—é–±–∏–º–æ–π —Ä–∞–±–æ—Ç—ã), "
        "–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤"],
    "first_question": [
        "–ü—Ä–∏—Ö–æ–¥—è –Ω–∞ —Ä–∞–±–æ—Ç—É, –≤—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ —á—Ç–æ –≤—ã –∑–¥–µ—Å—å –¥–µ–ª–∞–µ—Ç–µ, —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ –ø–æ–Ω–∏–º–∞–µ—Ç–µ, "
        "—á—Ç–æ —É–ø–µ—Ä–ª–∏—Å—å –≤ –ø–æ—Ç–æ–ª–æ–∫."],
    "second_question": [
        "–í—ã –æ—â—É—â–∞–µ—Ç–µ —Å–µ–±—è –≤ –∑–∞–º–∫–Ω—É—Ç–æ–º –∫—Ä—É–≥–µ: \"–†–∞–±–æ—Ç–∞-–î–æ–º-–°–µ–º—å—è-–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞\".\n–í —ç—Ç–æ–π –≥–æ–Ω–∫–µ –≤—ã <b>–∑–∞–±—ã–ª–∏ —Å–≤–æ–∏ "
        "–º–µ—á—Ç—ã –∏ —Ü–µ–ª–∏</b>."],
    "third_question": ["–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω—è—Ç—å –∫—É–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ, <b>–≤–∞—Å –Ω–∏–∫—É–¥–∞ –Ω–µ —Ç—è–Ω–µ—Ç</b>. –í—ã –ø–æ—á—Ç–∏ "
                       "–Ω–µ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —ç–º–æ—Ü–∏–π."],
    "fourth_question": ["–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ä–µ–¥–∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö, –≤—Å–µ –≤–æ–∫—Ä—É–≥ –ø—Ä–æ—Å—Ç–æ <b>\"—Ç–µ—Ä–ø—è—Ç –∏ –∂–¥—É—Ç\"</b> "
                        "–∏ –æ–∂–∏–¥–∞—é—Ç –æ—Ç –≤–∞—Å —Ç–æ –∂–µ —Å–∞–º–æ–µ"],
    "fifth_question": ["–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ –≤—ã –±–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ –∫–∞–∂–¥–æ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞. –ù–æ –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç–µ –∫–∞–∫ "
                       "–Ω–∞–π—Ç–∏ –∏ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å"],
    "sixth_question": ["–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –æ—â—É—â–µ–Ω–∏–µ–º —Ä–∞–¥–æ—Å—Ç–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—à–ª–∏ —Å–≤–æ–π –ø—É—Ç—å –∏ "
                       "—Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ —Å–≤–æ—ë –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ."],
    "invite_msg": ["–ö—É—Ä—Å –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ.",
                   "–í—ã –Ω–µ–Ω—É–∂–¥–∞–µ—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–º –∫—É—Ä—Å–µ, –µ—Å–ª–∏ –≤—ã –±—ã–ª–∏ —á–µ—Å—Ç–Ω—ã —Å —Å–æ–±–æ–π, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ "
                   "—É—Å–ª—É–≥–∞–º–∏."],
    "error_msg": ["–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –µ—â—ë —Ä–∞–∑ü•∫(/get_questions)"],
    "video": ["–í–∞—à–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ:"]}

users_dict = {}
users_control_dict = {}


class States(StatesGroup):
    LETS_GO = State()
    FIRST = State()
    SECOND = State()
    THIRD = State()
    FOURTH = State()
    FIFTH = State()
    SIXTH = State()
    CONSULTING = State()
    COURSE = State()
    MAP = State()


def check_if_admin(message: types.Message):
    admin = False
    for elem in db.control.find({}):
        if message.from_user.id == elem["user_id"]:
            admin = True
    return admin


def check_user_exists(message: types.Message):
    admin = False
    for elem in db.users.find({}):
        if message.from_user.id == elem["user_id"]:
            admin = True
    return admin


def process_answer(callback: types.CallbackQuery):
    data = callback.data[1:]
    if len(data) > 1:
        if data == "6n":
            users_dict[callback.from_user.id] = False
        data = data[1:]
    if data == "y":
        val = None
        try:
            val = users_dict[callback.from_user.id]
        except Exception:
            users_dict[callback.from_user.id] = True
        if val is False:
            users_dict[callback.from_user.id] = True
    else:
        try:
            users_dict[callback.from_user.id]
        except Exception:
            users_dict[callback.from_user.id] = False


def get_id_from_message(message: types.Message):
    split_data = message.text.split("(")
    split_data = split_data[1].split(")")
    user_id = int(split_data[0])
    return user_id


def request_controller(user_id, param_to_control):
    user_data = db.users.find({"user_id": user_id}).limit(1)[0]
    current_param_value = user_data[param_to_control]
    date_now = datetime.datetime.today()
    if current_param_value != "":
        param_date = datetime.datetime.strptime(current_param_value, "%Y-%m-%d")
        if date_now > (param_date + datetime.timedelta(days=1)):
            return True
        else:
            return False
    else:
        return True


def update_param_in_db(user_id, param_to_control):
    date_now = datetime.datetime.today()
    db.users.update_one({"user_id": user_id}, {"$set": {param_to_control: date_now.strftime("%Y-%m-%d")}})


def is_banned(user_id):
    flag = db.users.find({"user_id": user_id}).limit(0)[0]["banned"]
    return flag


def has_contact(user_id):
    flag = db.users.find({"user_id": user_id}).limit(0)[0]["contact"]
    if isinstance(flag, bool):
        return False
    else:
        return True


def insert_user_data_in_db(user_id, phone, user_name):
    if not has_contact(user_id):
        db.users.update_one({"user_id": user_id}, {"$set": {"contact": {"phone": phone, "user_name": user_name}}})


def get_user_data(user_id):
    if has_contact(user_id):
        user_data = db.users.find({"user_id": user_id}).limit(1)[0]["contact"]
        return user_data["phone"], user_data["user_name"]


async def send_to_receiver_from_contact(user_id, username, contact, message):
    receiver = db.receiver.find({})
    for elem in receiver:
        await bot.send_message(elem["user_id"],
                               username + "(" + str(user_id) + "): " + str(contact.phone_number) + "\n" + "*" + message,
                               reply_markup=keyboards.check_keyboard)


async def send_to_receiver_from_db(user_id, message):
    receiver = db.receiver.find({})
    user = db.users.find({"user_id": user_id}).limit(1)[0]
    username = user["contact"]["user_name"]
    phone_number = user["contact"]["phone"]
    for elem in receiver:
        await bot.send_message(elem["user_id"],
                               username + "(" + str(user_id) + "): " + str(phone_number) + "\n" + "*" + message,
                               reply_markup=keyboards.check_keyboard)


def edit_category_name(text):
    if text == "–ö—É—Ä—Å":
        return "–∫—É—Ä—Å"
    elif text == "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞":
        return "–Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É"
    elif text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        return "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"


@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    if not check_user_exists(message):
        db.users.insert_one(
            {"user_id": message.from_user.id, "banned": False, "course": "", "consultation": "", "astro_map": "",
             "contact": False})
    else:
        if is_banned(message.from_user.id):
            await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ãü•¥")
            return
    await bot.send_message(message.from_user.id, messages_dict["start"][0], parse_mode="HTML")
    await asyncio.sleep(10)
    message_to_edit = await bot.send_message(message.from_user.id, messages_dict["start"][1], parse_mode="HTML")
    await asyncio.sleep(5)
    await message_to_edit.edit_reply_markup(reply_markup=keyboards.how_to_keyboard)


@dp.callback_query_handler(lambda c: c.data[0] == "*")
async def callback_handler(callback: types.CallbackQuery):
    data = callback.data[1:]
    users_control_dict[callback.from_user.id] = {"message_id": callback.message.message_id, "callback_data": data}
    if data == "pq":
        await States.LETS_GO.set()
        await bot.send_message(callback.from_user.id, messages_dict["pre_question"][0],
                               reply_markup=keyboards.lets_go_keyboard, parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data[0] == "$")
async def admin_callbacks_handler(callback: types.CallbackQuery):
    data = callback.data[1:]
    if data == "confirm":
        await callback.message.edit_reply_markup(reply_markup=keyboards.confirmed_keyboard)
        user_id = get_id_from_message(callback.message)
        category = callback.message.text.split("*")[-1]
        adder = edit_category_name(category)
        await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ " + adder + " –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ü•≥")
    elif data == "refuse":
        await callback.message.edit_reply_markup(reply_markup=keyboards.rejected_keyboard)
        user_id = get_id_from_message(callback.message)
        category = callback.message.text.split("*")[-1]
        adder = edit_category_name(category)
        await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ " + adder + " –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞üòì")
    elif data == "ban_user":
        await callback.message.edit_reply_markup(reply_markup=keyboards.unban_keyboard)
        user_id = get_id_from_message(callback.message)
        db.users.update_one({"user_id": user_id}, {"$set": {"banned": True}})
        await bot.send_message(user_id, "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ãüòë")
    elif data == "unban_user":
        await callback.message.edit_reply_markup(reply_markup=keyboards.unbanned_keyboard)
        user_id = get_id_from_message(callback.message)
        db.users.update_one({"user_id": user_id}, {"$set": {"banned": False}})
        await bot.send_message(user_id, "–í–∞—Å —Ä–∞–∑–±–∞–Ω–∏–ª–∏üòá")


@dp.message_handler(commands=["get_questions"])
async def get_questions_handler(message: types.Message):
    if not is_banned(message.from_user.id):
        await start_question_list(message.from_user.id)
    else:
        await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ãü•¥")


async def start_question_list(user_id):
    await States.FIRST.set()
    await bot.send_message(user_id, messages_dict["first_question"][0],
                           reply_markup=keyboards.answer_keyboard, parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data == "*lg", state=States.LETS_GO)
async def lg_message_handler(callback: types.CallbackQuery):
    await start_question_list(callback.from_user.id)


@dp.callback_query_handler(lambda c: c.data[0] == "*", state=States.FIRST)
async def first_question_handler(callback: types.CallbackQuery):
    process_answer(callback)
    await States.SECOND.set()
    await bot.send_message(callback.from_user.id, messages_dict["second_question"][0],
                           reply_markup=keyboards.answer_keyboard_2, parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data[0:2] == "*2", state=States.SECOND)
async def second_question_handler(callback: types.CallbackQuery):
    process_answer(callback)
    await States.THIRD.set()
    await bot.send_message(callback.from_user.id, messages_dict["third_question"][0],
                           reply_markup=keyboards.answer_keyboard_3, parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data[0:2] == "*3", state=States.THIRD)
async def third_question_handler(callback: types.CallbackQuery):
    process_answer(callback)
    await States.FOURTH.set()
    await bot.send_message(callback.from_user.id, messages_dict["fourth_question"][0],
                           reply_markup=keyboards.answer_keyboard_4, parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data[0:2] == "*4", state=States.FOURTH)
async def fourth_question_handler(callback: types.CallbackQuery):
    process_answer(callback)
    await States.FIFTH.set()
    await bot.send_message(callback.from_user.id, messages_dict["fifth_question"][0],
                           reply_markup=keyboards.answer_keyboard_5, parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data[0:2] == "*5", state=States.FIFTH)
async def fifth_question_handler(callback: types.CallbackQuery):
    process_answer(callback)
    await States.SIXTH.set()
    await bot.send_message(callback.from_user.id, messages_dict["sixth_question"][0],
                           reply_markup=keyboards.answer_keyboard_6, parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data[0:2] == "*6", state=States.SIXTH)
async def sixth_question_handler(callback: types.CallbackQuery, state: FSMContext):
    process_answer(callback)
    try:
        val = users_dict[callback.from_user.id]
        if val:
            await bot.send_message(callback.from_user.id, messages_dict["invite_msg"][0],
                                                  reply_markup=keyboards.sign_up_reply_keyboard)
            await bot.send_message(callback.from_user.id, messages_dict["video"][0],
                                   reply_markup=keyboards.link_keyboard)

        else:
            await bot.send_message(callback.from_user.id, messages_dict["invite_msg"][1],
                                   reply_markup=keyboards.services_keyboard)
        await state.reset_state()
    except KeyError:
        await state.reset_state()
        await bot.send_message(callback.from_user.id, messages_dict["error_msg"][0],
                               reply_markup=keyboards.ReplyKeyboardRemove())


@dp.message_handler(content_types=["contact"], state=States.COURSE)
async def contact_handler_course(message: types.Message, state: FSMContext):
    if not is_banned(message.from_user.id):
        if message.contact is not None:
            username = message.from_user.username
            user_id = message.from_user.id
            contact = message.contact
            insert_user_data_in_db(user_id, contact.phone_number, username)
            await send_to_receiver_from_contact(user_id, username, contact, "–ö—É—Ä—Å")
            update_param_in_db(user_id, "course")
            await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞üì©")
            await state.reset_state()
        else:
            await bot.send_message(message.from_user.id,
                                   "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    else:
        await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ãü•¥")


@dp.message_handler(content_types=["contact"], state=States.CONSULTING)
async def contact_handler_consulting(message: types.Message, state: FSMContext):
    if not is_banned(message.from_user.id):
        if message.contact is not None:
            username = message.from_user.username
            user_id = message.from_user.id
            contact = message.contact
            insert_user_data_in_db(user_id, contact.phone_number, username)
            await send_to_receiver_from_contact(user_id, username, contact, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
            update_param_in_db(user_id, "consultation")
            await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞üì©")
            await state.reset_state()
        else:
            await bot.send_message(message.from_user.id,
                                   "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    else:
        await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ãü•¥")


@dp.message_handler(content_types=["contact"], state=States.MAP)
async def contact_handler_map(message: types.Message, state: FSMContext):
    if not is_banned(message.from_user.id):
        if message.contact is not None:
            username = message.from_user.username
            user_id = message.from_user.id
            contact = message.contact
            insert_user_data_in_db(user_id, contact.phone_number, username)
            await send_to_receiver_from_contact(user_id, username, contact, "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞")
            update_param_in_db(user_id, "astro_map")
            await bot.send_message(message.from_user.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ωüì©")
            await state.reset_state()
        else:
            await bot.send_message(message.from_user.id,
                                   "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    else:
        await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ãü•¥")


@dp.message_handler(content_types=["contact"])
async def contact_handler(message: types.Message, state: FSMContext):
    if not is_banned(message.from_user.id):
        if message.contact is not None:
            username = message.from_user.username
            user_id = message.from_user.id
            contact = message.contact
            insert_user_data_in_db(user_id, contact.phone_number, username)
            if request_controller(user_id, "course"):
                await send_to_receiver_from_contact(user_id, username, contact, "–ö—É—Ä—Å")
                update_param_in_db(user_id, "course")
                await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞üì©")
                await state.reset_state()
            else:
                await bot.send_message(user_id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Åüì•")
        else:
            await bot.send_message(message.from_user.id,
                                   "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    else:
        await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ãü•¥")


@dp.message_handler(state=States.COURSE)
async def simple_message_handler_course(message: types.Message, state: FSMContext):
    if message.text == "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏üìù":
        await bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥üìù", reply_markup=keyboards.services_keyboard)
        await state.reset_state()


@dp.message_handler(state=States.MAP)
async def simple_message_handler_course(message: types.Message, state: FSMContext):
    if message.text == "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏üìù":
        await bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥üìù", reply_markup=keyboards.services_keyboard)
        await state.reset_state()


@dp.message_handler(state=States.CONSULTING)
async def simple_message_handler_course(message: types.Message, state: FSMContext):
    if message.text == "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏üìù":
        await bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥üìù", reply_markup=keyboards.services_keyboard)
        await state.reset_state()


@dp.message_handler()
async def simple_message_handler(message: types.Message, state: FSMContext):
    text = message.text
    user_id = message.from_user.id
    if not is_banned(user_id):
        if text == "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏üìù":
            await bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥üìù", reply_markup=keyboards.services_keyboard)
            await state.reset_state()
        elif text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é‚úè":
            if request_controller(user_id, "consultation"):
                if has_contact(user_id):
                    await send_to_receiver_from_db(user_id, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
                    update_param_in_db(user_id, "consultation")
                    await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞üì©")
                else:
                    await bot.send_message(user_id,
                                           "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞‚òé",
                                           reply_markup=keyboards.sign_up_reply_keyboard)
                    await States.CONSULTING.set()
            else:
                await bot.send_message(user_id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—éüì•")
        elif text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Åüìå":
            if request_controller(user_id, "course"):
                if has_contact(user_id):
                    await send_to_receiver_from_db(user_id, "–ö—É—Ä—Å")
                    update_param_in_db(user_id, "course")
                    await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞üì©")
                else:
                    await bot.send_message(user_id,
                                           "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞‚òé",
                                           reply_markup=keyboards.sign_up_reply_keyboard)
                    await States.COURSE.set()
            else:
                await bot.send_message(user_id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Åüì•")
        elif text == "–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—ÉüîÆ":
            if request_controller(user_id, "astro_map"):
                if has_contact(user_id):
                    await send_to_receiver_from_db(user_id, "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞")
                    update_param_in_db(user_id, "astro_map")
                    await bot.send_message(user_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ωüì©")
                else:
                    await bot.send_message(user_id,
                                           "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞‚òé",
                                           reply_markup=keyboards.sign_up_reply_keyboard)
                    await States.MAP.set()
            else:
                await bot.send_message(user_id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ãüì•")
    else:
        await bot.send_message(user_id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ãü•¥")


if __name__ == '__main__':
    executor.start_polling(dp)
